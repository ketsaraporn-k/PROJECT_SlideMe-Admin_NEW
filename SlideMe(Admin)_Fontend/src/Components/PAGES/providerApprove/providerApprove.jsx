import React, { useEffect, useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import "./providerApprove.css";

function ProviderApprove() {
  const [providers, setProviders] = useState([]);
  const [filterStatus, setFilterStatus] = useState(""); // üîπ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  const [currentPage, setCurrentPage] = useState(1); // üîπ ‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  const itemsPerPage = 20; // üîπ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
  const navigate = useNavigate();

  useEffect(() => {
    fetchProviders();
  }, []);

  const fetchProviders = async () => {
    try {
      const response = await axios.get(
        "http://localhost:3000/providerApprove/"
      );
      setProviders(response.data);
    } catch (error) {
      console.error("Error fetching providers:", error);
    }
  };

  // üîπ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  const filteredProviders = providers.filter((provider) =>
    filterStatus ? provider.status_provider_approve === filterStatus : true
  );

  // üîπ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const totalPages = Math.ceil(filteredProviders.length / itemsPerPage);

  // üîπ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const currentProviders = filteredProviders.slice(startIndex, endIndex);

  return (
    <div className="provider-approve-container">
      <h1 className="provider-approve-title">Provider Approvals</h1>

      {/* üîπ Dropdown ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ */}
      <div className="filter-container">
        <label>‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: </label>
        <select
          value={filterStatus}
          onChange={(e) => {
            setFilterStatus(e.target.value);
            setCurrentPage(1); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà 1 ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤
          }}
        >
          <option value="">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
          <option value="approved">‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß</option>
          <option value="pending">‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</option>
          <option value="rejected">‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò</option>
        </select>
      </div>

      <table className="provider-approve-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó</th>
            <th>‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á</th>
            <th>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</th>
            <th>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</th>
            <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
            <th>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</th>
          </tr>
        </thead>
        <tbody>
          {currentProviders.map((provider) => (
            <tr key={provider.id_provider_approve}>
              <td>{provider.id_provider_approve}</td>
              <td>{provider.name_provider_approve}</td>
              <td>{provider.owner_name}</td>
              <td>{provider.email_provider_approve}</td>
              <td>{provider.phone_number_provider_approve}</td>
              <td>{provider.status_provider_approve}</td>
              <td>
                <button
                  className="provider-approve-check-btn"
                  onClick={() =>
                    navigate(
                      `/providerApproveDetail/${provider.id_provider_approve}`
                    )
                  }
                >
                  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* üîπ ‡∏õ‡∏∏‡πà‡∏° Pagination */}
      <div className="pagination">
        <button
          onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
          disabled={currentPage === 1}
        >
          Previous
        </button>
        <span>
          ‡∏´‡∏ô‡πâ‡∏≤ {currentPage} / {totalPages}
        </span>
        <button
          onClick={() =>
            setCurrentPage((prev) => Math.min(prev + 1, totalPages))
          }
          disabled={currentPage === totalPages}
        >
          Next
        </button>
      </div>
    </div>
  );
}

export default ProviderApprove;
